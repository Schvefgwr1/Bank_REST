openapi: 3.1.0
info:
  title: Bank Cards API
  description: OpenAPI documentation for Bank Cards service
  version: 1.0.0
servers:
- url: http://localhost:8080
  description: Generated server url
tags:
- name: Auth
  description: API для входа и обновления доступа
- name: User Activities
  description: API для операций пользователей с банковскими картами
- name: Users
  description: API для управления пользователями
- name: Cards
  description: API для управления банковскими картами
paths:
  /users/{id}:
    put:
      tags:
      - Users
      summary: Обновить пользователя по ID
      description: Обновляет данные пользователя с указанным ID
      operationId: updateUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
        required: true
      responses:
        "200":
          description: Пользователь успешно обновлен
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Ошибка валидации или при обновлении
        "403":
          description: Ошибка авторизации
        "404":
          description: Пользователь не найден
        "500":
          description: Ошибка базы данных или роли
      security:
      - bearerAuth: []
    delete:
      tags:
      - Users
      summary: Удалить пользователя по ID
      description: Удаляет пользователя с указанным ID
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Пользователь успешно удалён
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/DeleteUserResponse"
        "403":
          description: Ошибка авторизации
        "404":
          description: Пользователь не найден
        "500":
          description: Ошибка базы данных
      security:
      - bearerAuth: []
  /cards/{id}:
    put:
      tags:
      - Cards
      summary: Обновить карту по ID
      description: Обновляет информацию по карте с указанным ID
      operationId: updateCard
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCardRequest"
        required: true
      responses:
        "200":
          description: Карта успешно обновлена
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardResponse"
        "400":
          description: Ошибка обновления или статус карты
        "403":
          description: Ошибка авторизации
        "404":
          description: Карта не найдена
        "500":
          description: Ошибка статуса или базы данных
      security:
      - bearerAuth: []
    delete:
      tags:
      - Cards
      summary: Удалить карту по ID
      description: Удаляет карту с указанным ID
      operationId: deleteCard
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Карта успешно удалена
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/DeleteCardResponse"
        "403":
          description: Ошибка авторизации
        "404":
          description: Карта не найдена
        "500":
          description: Ошибка базы данных
      security:
      - bearerAuth: []
  /activities/block-requests/{requestId}:
    put:
      tags:
      - User Activities
      summary: Завершить запрос на блокировку карты
      description: Отмечает запрос на блокировку карты как завершенный
      operationId: completeBlockRequest
      parameters:
      - name: requestId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Запрос успешно завершен
        "400":
          description: Ошибка в запросе
        "403":
          description: Ошибка авторизации
        "404":
          description: Запрос не найден
        "500":
          description: Внутренняя ошибка сервиса
      security:
      - bearerAuth: []
  /users:
    get:
      tags:
      - Users
      summary: Получить список пользователей
      description: Возвращает список пользователей с пагинацией
      operationId: getUsers
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          description: Список пользователей
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Page"
        "403":
          description: Ошибка авторизации
        "500":
          description: Ошибка базы данных
      security:
      - bearerAuth: []
    post:
      tags:
      - Users
      summary: Создать нового пользователя
      description: Создает пользователя с заданными данными
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
        required: true
      responses:
        "200":
          description: Пользователь успешно создан
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Ошибка валидации или при обновлении
        "403":
          description: Ошибка авторизации
        "500":
          description: Ошибка базы данных или роли
      security:
      - bearerAuth: []
  /cards:
    get:
      tags:
      - Cards
      summary: Получить все карты
      description: Возвращает список всех банковских карт с пагинацией
      operationId: getAllCards
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          description: Список карт
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Page"
        "403":
          description: Ошибка авторизации
        "500":
          description: Ошибка базы данных
      security:
      - bearerAuth: []
    post:
      tags:
      - Cards
      summary: Создать новую карту
      description: Создает банковскую карту по данным из запроса
      operationId: createCard
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCardRequest"
        required: true
      responses:
        "201":
          description: Карта успешно создана
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardResponse"
        "400":
          description: Ошибка валидации или статус карты
        "403":
          description: Ошибка авторизации
        "404":
          description: Пользователь не найден
        "500":
          description: Ошибка статуса
      security:
      - bearerAuth: []
  /auth/signin:
    post:
      tags:
      - Auth
      summary: Вход пользователя
      description: Аутентифицирует пользователя и возвращает JWT-токен
      operationId: signIn
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignInRequest"
        required: true
      responses:
        "200":
          description: Успешная авторизация
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SignInResponse"
        "401":
          description: Неверные учетные данные
        "403":
          description: Ошибка авторизации
        "500":
          description: Ошибка работы с пользователем
  /auth/refresh:
    post:
      tags:
      - Auth
      summary: Обновление JWT-токена
      description: Получение нового токена по refresh-токену
      operationId: refreshToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenRequest"
        required: true
      responses:
        "200":
          description: Новый токен успешно выдан
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SignInResponse"
        "403":
          description: Ошибка авторизации
        "500":
          description: Ошибка работы с пользователем
      security:
      - bearerAuth: []
  /activities/transfer:
    post:
      tags:
      - User Activities
      summary: Перевод денег между картами
      description: Позволяет перевести деньги с одной карты пользователя на другую
        карту
      operationId: transferMoney
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferRequest"
        required: true
      responses:
        "200":
          description: Перевод успешно выполнен
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardTransfer"
        "400":
          description: Ошибка в запросе или параметрах
        "403":
          description: Ошибка авторизации
        "404":
          description: Карта не найдена
        "500":
          description: Ошибка базы данных или сервиса
      security:
      - bearerAuth: []
  /activities/block-request/{cardId}:
    post:
      tags:
      - User Activities
      summary: Запрос на блокировку карты
      description: Создает запрос на блокировку карты пользователя
      operationId: requestBlockCard
      parameters:
      - name: cardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "201":
          description: Запрос на блокировку успешно создан
          content:
            '*/*':
              schema:
                type: integer
                format: int64
        "400":
          description: Ошибка в параметрах запроса
        "403":
          description: Ошибка авторизации
        "404":
          description: Карта не найдена
        "500":
          description: Внутренняя ошибка сервиса
      security:
      - bearerAuth: []
  /cards/my:
    get:
      tags:
      - Cards
      summary: Получить карты текущего пользователя
      description: "Возвращает список карт пользователя, идентифицированного по то\
        кену, с пагинацией"
      operationId: getMyCards
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          description: Список карт пользователя
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Page"
        "400":
          description: Ошибка контекста
        "403":
          description: Ошибка авторизации
        "404":
          description: Пользователь не найден
        "500":
          description: Ошибка базы данных
      security:
      - bearerAuth: []
  /activities/block-requests:
    get:
      tags:
      - User Activities
      summary: Получить активные запросы на блокировку карт
      description: Возвращает страницу с активными запросами на блокировку карт
      operationId: getActiveBlockRequests
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          description: Список активных запросов получен
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Page"
        "403":
          description: Ошибка авторизации
        "500":
          description: Ошибка базы данных
      security:
      - bearerAuth: []
components:
  schemas:
    UserResponse:
      type: object
      description: Ответ с данными пользователя
      properties:
        id:
          type: integer
          format: int64
          description: Идентификатор пользователя
          example: 123
        login:
          type: string
          description: Логин пользователя
          example: user123
        role:
          type: string
          description: Роль пользователя
          example: ADMIN
    UpdateUserRequest:
      type: object
      description: Запрос для обновления пользователя
      properties:
        login:
          type: string
          description: Логин пользователя
          example: user123
        password:
          type: string
          description: Пароль пользователя
          example: secretPassword
        roleName:
          type: string
          description: Роль пользователя
          example: ADMIN
    CardResponse:
      type: object
      description: Ответ с информацией по карте
      properties:
        id:
          type: integer
          format: int64
          description: Уникальный идентификатор карты
          example: 1
        maskNumber:
          type: string
          description: "Замаскированный номер карты, например '**** **** **** 3456'"
          example: '**** **** **** 3456'
        expiryDate:
          type: string
          format: date
          description: Дата окончания срока действия карты
          example: 2026-12-31
        balance:
          type: number
          description: Текущий баланс карты
          example: 1500.5
        status:
          type: string
          description: Статус карты
          enum:
          - ACTIVE
          - BLOCKED
          - EXPIRED
          example: ACTIVE
    UpdateCardRequest:
      type: object
      description: Запрос на обновление информации по карте
      properties:
        status:
          type: string
          description: Статус карты
          enum:
          - ACTIVE
          - BLOCKED
          - EXPIRED
          example: ACTIVE
        expiryDate:
          type: string
          format: date
          description: Дата окончания срока действия карты (будущая дата)
          example: 2027-01-01
    UserRequest:
      type: object
      description: Запрос на создание пользователя
      properties:
        login:
          type: string
          description: Логин пользователя
          example: user123
          minLength: 1
        password:
          type: string
          description: Пароль пользователя
          example: secretPassword
          minLength: 1
        roleName:
          type: string
          description: Название роли пользователя
          example: USER
          minLength: 1
      required:
      - login
      - password
      - roleName
    CreateCardRequest:
      type: object
      description: Запрос на создание карты
      properties:
        cardNumber:
          type: string
          description: Номер карты в формате '**** **** **** ****'
          example: 1234
          minLength: 1
          pattern: "^\\d{4} \\d{4} \\d{4} \\d{4}$"
        expiryDate:
          type: string
          format: date
          description: Дата окончания срока действия карты (будущая дата)
          example: 2026-12-31
        balance:
          type: number
          description: Начальный баланс карты
          example: 1000.0
          minimum: 0.01
        userID:
          type: integer
          format: int64
          description: "ID пользователя, которому принадлежит карта"
          example: 123
      required:
      - cardNumber
      - expiryDate
      - userID
    SignInRequest:
      type: object
      properties:
        password:
          type: string
          description: User password
          example: password123
          minLength: 1
        username:
          type: string
          description: User username
          example: john.doe
          minLength: 1
      required:
      - password
      - username
    SignInResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT access token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refreshToken:
          type: string
          description: Refresh token for getting new access tokens
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        expirationTime:
          type: string
          description: "Duration until access token expires, ISO-8601 duration format"
          example: PT1H
    RefreshTokenRequest:
      type: object
      properties:
        password:
          type: string
          description: User password (required)
          example: password123
          minLength: 1
        username:
          type: string
          description: User username (required)
          example: john.doe
          minLength: 1
        refreshToken:
          type: string
          description: Refresh token issued earlier (required)
          example: eyJhbGciOiJIUzI1...
          minLength: 1
      required:
      - password
      - refreshToken
      - username
    Card:
      type: object
      properties:
        id:
          type: integer
          format: int64
        expiryDate:
          type: string
          format: date
        balance:
          type: number
        status:
          $ref: "#/components/schemas/CardStatus"
        owner:
          $ref: "#/components/schemas/User"
        maskedCardNumber:
          type: string
    CardStatus:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          enum:
          - ACTIVE
          - BLOCKED
          - EXPIRED
    CardTransfer:
      type: object
      properties:
        id:
          type: integer
          format: int64
        fromCard:
          $ref: "#/components/schemas/Card"
        toCard:
          $ref: "#/components/schemas/Card"
        amount:
          type: number
        transferTime:
          type: string
          format: date-time
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        login:
          type: string
        role:
          $ref: "#/components/schemas/Role"
        enabled:
          type: boolean
        accountNonExpired:
          type: boolean
        credentialsNonExpired:
          type: boolean
        username:
          type: string
        accountNonLocked:
          type: boolean
      required:
      - login
    TransferRequest:
      type: object
      properties:
        fromCardId:
          type: integer
          format: int64
          description: ID карты-отправителя
          example: 123
        toCardId:
          type: integer
          format: int64
          description: ID карты-получателя
          example: 456
        amount:
          type: number
          description: Сумма перевода
          example: 100.5
          minimum: 0.01
      required:
      - fromCardId
      - toCardId
    Page:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items: {}
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: "#/components/schemas/PageableObject"
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: "#/components/schemas/SortObject"
        paged:
          type: boolean
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
    DeleteUserResponse:
      type: object
      description: Ответ после удаления пользователя
      properties:
        userID:
          type: integer
          format: int64
          description: Идентификатор удалённого пользователя
          example: 123
        message:
          type: string
          description: Сообщение о результате удаления
          example: Пользователь успешно удалён
    DeleteCardResponse:
      type: object
      description: Ответ на удаление карты
      properties:
        cardID:
          type: integer
          format: int64
          description: ID удалённой карты
          example: 1
        message:
          type: string
          description: Сообщение об успешном удалении
          example: Card deleted successfully
  securitySchemes:
    bearerAuth:
      type: http
      in: header
      scheme: bearer
      bearerFormat: JWT
